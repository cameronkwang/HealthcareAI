import { BCBSCalculator } from '../components/carriers/bcbs/BCBSCalculator';
import { BCBSInput, BCBSCalculationResult } from '../types/bcbs';

describe('BCBS Comprehensive Methodology Test', () => {
  const calculator = new BCBSCalculator();

  test('BCBS 30-Line Methodology Validation', async () => {
    const comprehensiveInput: BCBSInput = {
      caseId: 'comprehensive-test-001',
      carrier: 'BCBS',
      effectiveDates: {
        renewalStart: new Date('2024-02-01'),
        renewalEnd: new Date('2025-01-31')
      },
      monthlyClaimsData: [
        {
          month: '2023-02',
          memberMonths: { medical: 200, rx: 200, total: 200 },
          incurredClaims: { medical: 120000, rx: 30000 }
        },
        {
          month: '2023-03',
          memberMonths: { medical: 210, rx: 210, total: 210 },
          incurredClaims: { medical: 125000, rx: 32000 }
        }
      ],
      largeClaimantsData: [
        {
          claimantId: 'LC001',
          incurredDate: new Date('2023-06-15'),
          totalAmount: 250000,
          medicalAmount: 250000,
          rxAmount: 0,
          diagnosis: 'Cardiac Surgery'
        }
      ],
      manualRates: {
        medical: 450.00,
        rx: 120.00,
        total: 570.00
      },
      carrierSpecificParameters: {
        plans: [
          {
            planId: 'plan1',
            planName: 'BCE Saver $3000 with Coinsurance',
            poolingLevel: 225000,
            experienceWeights: { current: 0.33, renewal: 0.67 },
            credibilityFactor: 1.00,
            ibnrFactors: {
              medical: { current: 1.0000, renewal: 1.0240 },
              pharmacy: { current: 1.0000, renewal: 1.0020 }
            },
            trendFactors: {
              medical: {
                annualCurrent: 1.1000, annualRenewal: 1.1003,
                monthsCurrent: 35.0, monthsRenewal: 23.0,
                compoundedCurrent: 1.3235, compoundedRenewal: 1.2010
              },
              pharmacy: {
                annualCurrent: 1.1073, annualRenewal: 1.1136,
                monthsCurrent: 35.0, monthsRenewal: 23.0,
                compoundedCurrent: 1.3462, compoundedRenewal: 1.2290
              }
            },
            adjustmentFactors: {
              ffsAge: { current: 1.0375, renewal: 1.0214 },
              benefitAdjustment: 1.0000,
              underwriterAdjustment: 1.0000,
              pathwayToSavings: 0.9950
            },
            retentionComponents: {
              retentionPMPM: { current: 93.49, renewal: 145.11 },
              ppoPremiumTax: { current: 6.48, renewal: 9.96 },
              acaAdjustments: { current: 0.27, renewal: 0.41 }
            },
            currentPremiumPMPM: 624.76,
            manualClaimsPMPM: { current: 367.92, renewal: 536.12 }
          },
          {
            planId: 'plan2',
            planName: 'BCE Saver $2000 with Coinsurance',
            poolingLevel: 225000,
            experienceWeights: { current: 0.33, renewal: 0.67 },
            credibilityFactor: 1.00,
            ibnrFactors: {
              medical: { current: 1.0000, renewal: 1.0240 },
              pharmacy: { current: 1.0000, renewal: 1.0020 }
            },
            trendFactors: {
              medical: {
                annualCurrent: 1.1000, annualRenewal: 1.1003,
                monthsCurrent: 35.0, monthsRenewal: 23.0,
                compoundedCurrent: 1.3235, compoundedRenewal: 1.2010
              },
              pharmacy: {
                annualCurrent: 1.1073, annualRenewal: 1.1136,
                monthsCurrent: 35.0, monthsRenewal: 23.0,
                compoundedCurrent: 1.3462, compoundedRenewal: 1.2290
              }
            },
            adjustmentFactors: {
              ffsAge: { current: 1.0375, renewal: 1.0214 },
              benefitAdjustment: 1.0000,
              underwriterAdjustment: 1.0000,
              pathwayToSavings: 0.9950
            },
            retentionComponents: {
              retentionPMPM: { current: 87.20, renewal: 135.34 },
              ppoPremiumTax: { current: 6.04, renewal: 9.29 },
              acaAdjustments: { current: 0.25, renewal: 0.38 }
            },
            currentPremiumPMPM: 582.14,
            manualClaimsPMPM: { current: 343.05, renewal: 499.80 }
          }
        ],
        compositeWeighting: {
          enrollmentBased: true,
          totalEnrollment: 500
        },
        globalSettings: {
          totalMemberMonths: 1430
        }
      },
      multiPlanData: {
        plans: [
          {
            planId: 'plan1',
            experiencePeriods: {
              current: {
                startDate: new Date('2023-02-01'),
                endDate: new Date('2024-01-31'),
                memberMonths: 650
              },
              renewal: {
                startDate: new Date('2024-02-01'),
                endDate: new Date('2025-01-31'),
                memberMonths: 650
              }
            },
            memberMonths: {
              currentTotal: 650,
              renewalTotal: 650,
              projectedMonthlyMembers: { current: 54.17, renewal: 54.17 }
            },
            medicalClaims: {
              current: {
                totalClaims: 350000,
                poolingLevel: 225000,
                pooledClaims: 125000,
                netClaims: 225000,
                expPeriodMemberMonths: 650,
                netPMPM: 346.15,
                adjustedNetPMPM: 367.92,
                projectedPMPM: 536.12
              },
              renewal: {
                totalClaims: 380000,
                poolingLevel: 225000,
                pooledClaims: 155000,
                netClaims: 225000,
                expPeriodMemberMonths: 650,
                netPMPM: 346.15,
                adjustedNetPMPM: 367.92,
                projectedPMPM: 536.12
              }
            },
            pharmacyClaims: {
              current: {
                totalClaims: 105000,
                poolingLevel: 0,
                pooledClaims: 0,
                netClaims: 105000,
                expPeriodMemberMonths: 650,
                netPMPM: 161.54,
                adjustedNetPMPM: 161.54,
                projectedPMPM: 198.36
              },
              renewal: {
                totalClaims: 110000,
                poolingLevel: 0,
                pooledClaims: 0,
                netClaims: 110000,
                expPeriodMemberMonths: 650,
                netPMPM: 169.23,
                adjustedNetPMPM: 169.57,
                projectedPMPM: 208.24
              }
            },
            enrollment: {
              current: {
                single: { count: 150, rate: 624.76 },
                couple: { count: 100, rate: 1249.52 },
                spmd: { count: 50, rate: 1124.57 },
                family: { count: 75, rate: 1561.90 },
                total: { count: 375, monthlyPremium: 234388, annualPremium: 2812656 }
              },
              renewal: {
                single: { count: 150, rate: 650.35 },
                couple: { count: 100, rate: 1300.70 },
                spmd: { count: 50, rate: 1170.63 },
                family: { count: 75, rate: 1626.75 },
                total: { count: 375, monthlyPremium: 244244, annualPremium: 2930928 }
              }
            }
          },
          {
            planId: 'plan2',
            experiencePeriods: {
              current: {
                startDate: new Date('2023-02-01'),
                endDate: new Date('2024-01-31'),
                memberMonths: 780
              },
              renewal: {
                startDate: new Date('2024-02-01'),
                endDate: new Date('2025-01-31'),
                memberMonths: 780
              }
            },
            memberMonths: {
              currentTotal: 780,
              renewalTotal: 780,
              projectedMonthlyMembers: { current: 65.0, renewal: 65.0 }
            },
            medicalClaims: {
              current: {
                totalClaims: 420000,
                poolingLevel: 225000,
                pooledClaims: 195000,
                netClaims: 225000,
                expPeriodMemberMonths: 780,
                netPMPM: 288.46,
                adjustedNetPMPM: 343.05,
                projectedPMPM: 499.80
              },
              renewal: {
                totalClaims: 445000,
                poolingLevel: 225000,
                pooledClaims: 220000,
                netClaims: 225000,
                expPeriodMemberMonths: 780,
                netPMPM: 288.46,
                adjustedNetPMPM: 343.05,
                projectedPMPM: 499.80
              }
            },
            pharmacyClaims: {
              current: {
                totalClaims: 126000,
                poolingLevel: 0,
                pooledClaims: 0,
                netClaims: 126000,
                expPeriodMemberMonths: 780,
                netPMPM: 161.54,
                adjustedNetPMPM: 161.54,
                projectedPMPM: 198.36
              },
              renewal: {
                totalClaims: 132000,
                poolingLevel: 0,
                pooledClaims: 0,
                netClaims: 132000,
                expPeriodMemberMonths: 780,
                netPMPM: 169.23,
                adjustedNetPMPM: 169.57,
                projectedPMPM: 208.24
              }
            },
            enrollment: {
              current: {
                single: { count: 78, rate: 582.14 },
                couple: { count: 52, rate: 1164.28 },
                spmd: { count: 26, rate: 1047.85 },
                family: { count: 19, rate: 1455.35 },
                total: { count: 175, monthlyPremium: 101874, annualPremium: 1222488 }
              },
              renewal: {
                single: { count: 78, rate: 606.03 },
                couple: { count: 52, rate: 1212.06 },
                spmd: { count: 26, rate: 1090.85 },
                family: { count: 19, rate: 1515.08 },
                total: { count: 175, monthlyPremium: 106055, annualPremium: 1272660 }
              }
            }
          }
        ],
        totalMemberMonths: 1430
      }
    };

    const metadata = {
      calculationDate: new Date(),
      version: '1.0',
      requestId: 'comprehensive-test-001'
    };

    console.log('\n=== Running Comprehensive BCBS Test ===');
    const result: BCBSCalculationResult = await calculator.calculateRenewal(comprehensiveInput, metadata);

    // ============= Structure Validation =============
    expect(result).toBeDefined();
    expect(result.carrier).toBe('BCBS');
    expect(result.individualPlans).toHaveLength(2);
    expect(result.composite).toBeDefined();
    expect(result.enrollmentSummary).toBeDefined();

    // ============= 30-Line Methodology Validation =============
    result.individualPlans.forEach((plan, index) => {
      console.log(`\n--- Plan ${index + 1}: ${plan.planName} ---`);
      
      // Each plan should have calculations (not necessarily exactly 30 due to sub-lines)
      expect(plan.calculations.length).toBeGreaterThan(20);
      console.log(`Calculation lines: ${plan.calculations.length}`);
      
      // Verify essential calculation sections exist
      const medicalLines = plan.calculations.filter(c => c.section === 'medical');
      const pharmacyLines = plan.calculations.filter(c => c.section === 'pharmacy');
      const totalLines = plan.calculations.filter(c => c.section === 'total');
      
      expect(medicalLines.length).toBeGreaterThan(0);
      expect(pharmacyLines.length).toBeGreaterThan(0);
      expect(totalLines.length).toBeGreaterThan(0);
      
      console.log(`  Medical lines: ${medicalLines.length}`);
      console.log(`  Pharmacy lines: ${pharmacyLines.length}`);
      console.log(`  Total lines: ${totalLines.length}`);
      
      // ============= Line-by-Line Validation =============
      
      // Lines 1-2: Experience Period and Member Months should exist
      const headerLines = plan.calculations.filter(c => 
        c.description.includes('Experience Period') || 
        c.description.includes('Member Months') ||
        c.description.includes('Projected Monthly Members')
      );
      expect(headerLines.length).toBeGreaterThan(0);
      
      // Medical Section Lines (3-9): Should have key components
      const medicalClaimsLine = plan.calculations.find(c => 
        c.description.includes('Medical Claims') && c.section === 'medical'
      );
      const medicalPooledLine = plan.calculations.find(c => 
        c.description.includes('Pooled') && c.section === 'medical'
      );
      const medicalNetLine = plan.calculations.find(c => 
        c.description.includes('Net Medical') && c.section === 'medical'
      );
      
      expect(medicalClaimsLine).toBeDefined();
      expect(medicalPooledLine).toBeDefined();
      expect(medicalNetLine).toBeDefined();
      
      // Pharmacy Section Lines (3-9): Should have key components
      const pharmacyClaimsLine = plan.calculations.find(c => 
        c.description.includes('Pharmacy Claims') && c.section === 'pharmacy'
      );
      const pharmacyNetLine = plan.calculations.find(c => 
        c.description.includes('Net Pharmacy') && c.section === 'pharmacy'
      );
      
      expect(pharmacyClaimsLine).toBeDefined();
      expect(pharmacyNetLine).toBeDefined();
      
      // Total Section Lines (10-30): Should have comprehensive calculations
      const totalProjectedLine = plan.calculations.find(c => 
        c.description.includes('Total Projected') && c.section === 'total'
      );
      const credibilityLine = plan.calculations.find(c => 
        c.description.includes('Credibility') && c.section === 'total'
      );
      const rateActionLine = plan.calculations.find(c => 
        c.description.includes('Rate Action') && c.section === 'total'
      );
      
      expect(totalProjectedLine).toBeDefined();
      expect(credibilityLine).toBeDefined();
      expect(rateActionLine).toBeDefined();
      
      // ============= Pooling Validation =============
      if (medicalPooledLine) {
        // Medical pooled claims should be reasonable
        expect(medicalPooledLine.result).toBeGreaterThanOrEqual(0);
        console.log(`  Medical pooled claims: $${medicalPooledLine.result.toLocaleString()}`);
      }
      
      // ============= Final Metrics Validation =============
      expect(plan.finalMetrics.projectedPremiumPMPM).toBeGreaterThan(0);
      expect(plan.finalMetrics.requiredPremiumPMPM).toBeGreaterThan(0);
      expect(plan.finalMetrics.currentPremiumPMPM).toBeGreaterThan(0);
      expect(plan.finalMetrics.rateAction).toBeGreaterThan(-1.0); // No more than -100%
      expect(plan.finalMetrics.rateAction).toBeLessThan(3.0); // No more than +300%
      
      console.log(`  Current PMPM: $${plan.finalMetrics.currentPremiumPMPM.toFixed(2)}`);
      console.log(`  Projected PMPM: $${plan.finalMetrics.projectedPremiumPMPM.toFixed(2)}`);
      console.log(`  Rate Action: ${(plan.finalMetrics.rateAction * 100).toFixed(2)}%`);
    });

    // ============= Multi-Plan Composite Validation =============
    expect(result.composite.totalEnrollment).toBeGreaterThan(0);
    expect(result.composite.compositeRateAction).toBeGreaterThan(-1.0);
    expect(result.composite.compositeRateAction).toBeLessThan(3.0);
    
    // Enrollment weights should sum to approximately 1.0
    const weightSum = Object.values(result.composite.enrollmentWeights).reduce((sum, weight) => sum + weight, 0);
    expect(weightSum).toBeCloseTo(1.0, 2);
    
    console.log(`\n=== Composite Results ===`);
    console.log(`Total Enrollment: ${result.composite.totalEnrollment.toLocaleString()}`);
    console.log(`Composite Rate Action: ${(result.composite.compositeRateAction * 100).toFixed(2)}%`);
    console.log(`Weighted Current PMPM: $${result.composite.weightedAverages.currentPMPM.toFixed(2)}`);
    console.log(`Weighted Projected PMPM: $${result.composite.weightedAverages.projectedPMPM.toFixed(2)}`);
    
    // ============= Enrollment Summary Validation =============
    expect(result.enrollmentSummary.totalEnrollment).toBeGreaterThan(0);
    expect(result.enrollmentSummary.planBreakdown).toHaveLength(2);
    
    result.enrollmentSummary.planBreakdown.forEach(planBreakdown => {
      expect(planBreakdown.enrollment).toBeGreaterThan(0);
      expect(planBreakdown.percentage).toBeGreaterThan(0);
      expect(planBreakdown.percentage).toBeLessThanOrEqual(100);
    });
    
    console.log(`\n=== Enrollment Summary ===`);
    result.enrollmentSummary.planBreakdown.forEach(plan => {
      console.log(`${plan.planName}: ${plan.enrollment.toLocaleString()} (${plan.percentage.toFixed(1)}%)`);
    });
    
    console.log('\n✅ BCBS Comprehensive Test PASSED! All 30-line methodology validations successful.');
  });
}); 